#!/bin/bash

_print_help_msg() {
    cat <<'END_HELP_MSG'
Usage: vagrant-pytest [-B] [-D] [-H] [-K] [-S] <pytest_args..>

vagrant-pytest is a wrapper around pytest, running it inside a Ubuntu Linux
VirtualBox virtual machine that is created and managed using Vagrant. By using
Vagrant and VirtualBox, the virtual machine is reproducible, can be snapshotted,
and allows all pytest runs to start in a clean environment regardless of
previous runs.

For more information about the virtual machine environment see the file
Vagrantfile_pytest. For more information about Vagrant, VirtualBox, and pytest,
refer to their respective documentation.

This program should exit with the same status as the pytest run, however, in the
case of an unexpected failure or misconfigured environment it exits with status
73.

Options:
  -B            Force rebuild of the virtual machine (snapshots will be lost)
  -D            Run this program in debug mode (set -x)
  -H            Print this help message and exit 0
  -P            Update yaesm's python dependencies in the VM
  -R            Keep the virtual machine running
  -S            Create a snapshot of the virtual machine after executing pytest
  -V            Run this program in verbose mode

Examples:
  ./vagrant-pytest tests
  ./vagrant-pytest -H
  ./vagrant-pytest -B -V -S --show-capture=stdout --fixtures-per-test tests
END_HELP_MSG
}

set -E

_r() { # runs command but bails out if the command exits non-zero 
    local e=''
    if [[ $- == *e* ]]; then
        e='set'
    fi
    set -e
    if [ 0 -eq $OPT_VERBOSE ]; then
        eval "$@"
    else
        eval "$@" >/dev/null 2>&1
    fi
    if [ -n "$e" ]; then set -e; else set +e; fi
    return 0
}

_log() {
    local msg=$1
    1>&2 printf 'vagrant-pytest: log: %s\n' "$msg"
}

_die() {
    local msg=$1
    1>&2 printf 'vagrant-pytest: fatal error: %s\n' "$msg"
    exit 73
}

trap 'if [[ $- == *e* ]]; then 1>&2 printf "vagrant-pytest: fatal command failure: %s\n" "$BASH_COMMAND"; exit 73; fi' ERR

OPTS_PYTEST=''
OPT_DEBUG=1
OPT_VM_FORCE_BUILD=1
OPT_VM_KEEP_RUNNING=1
OPT_VM_SAVE_SNAPSHOT=1
OPT_UPDATE_PYTHON_DEPS=1
OPT_VERBOSE=1
while [ -n "$1" ]; do # This script uses single capital letter opts to not clash with pytest opts.
    case "$1" in
        -B)
          OPT_VM_FORCE_BUILD=0
          shift
          ;;
        -D)
          set -x
          PS4='vagrant-pytest: line $LINENO: DEBUG: '
          shift
          ;;
        -H)
          _print_help_msg
          exit 0
          ;;
        -P)
          OPT_UPDATE_PYTHON_DEPS=0
          shift
          ;;
        -R)
          OPT_VM_KEEP_RUNNING=0
          shift
          ;;
        -S)
          OPT_VM_SAVE_SNAPSHOT=0
          shift
          ;;
        -V)
          OPT_VERBOSE=0
          shift
          ;;
        *)
          OPTS_PYTEST="$OPTS_PYTEST $1"
          shift
          ;;
    esac
done

if [ 0 -eq $OPT_VM_KEEP_RUNNING ] && [ 0 -eq $OPT_VM_SAVE_SNAPSHOT ]; then
    _die '-R and -O options are incompatible'
fi

which vagrant    >/dev/null 2>&1 || _die 'vagrant not in $PATH'
which virtualbox >/dev/null 2>&1 || _die 'virtualbox not in $PATH'
which rsync      >/dev/null 2>&1 || _die 'rsync not in $PATH'
lsmod | grep -q vboxdrv          || _die 'vboxdrv kernel module not loaded'
if [ "$(basename $(pwd))" != yaesm -o ! -f Vagrantfile_pytest -o ! -d src -o ! -d tests ]; then
    _die 'not in yaesm root directory'
fi

export VAGRANT_VAGRANTFILE=Vagrantfile_pytest

VM_STATE=$(vagrant status --machine-readable yaesm-pytest | grep ',yaesm-pytest,state,' | awk -F',' '{ORS=""; print $NF}')
[ $VM_STATE != not_created ]
VM_BUILT=$?
vagrant snapshot list --machine-readable yaesm-pytest | grep -q ',yaesm-pytest-postbuild-snapshot'
VM_SNAPSHOT_EXISTS=$?

if [ 0 -eq $VM_BUILT ] && [ 0 -ne $VM_SNAPSHOT_EXISTS ]; then
    _die 'yaesm-pytest VM exists but its post-build snapshot does not exist'
fi

if [ running == $VM_STATE ]; then
    _r vagrant halt yaesm-pytest
     VM_STATE=poweroff
fi

if [ 0 -eq $OPT_VM_FORCE_BUILD ] && [ 0 -eq $VM_BUILT ]; then
    _log 'destroying yaesm-pytest VM'
    _r vagrant destroy -f yaesm-pytest
    VM_STATE=not_created
    VM_BUILT=1
    VM_SNAPSHOT_EXISTS=1 # snapshots are destroyed along with the VM
    _r vagrant global-status --prune
fi

if [ 0 -ne $VM_BUILT ]; then
    _log 'building yaesm-pytest VM'
    _r vagrant up --provider virtualbox --no-install-provider yaesm-pytest
    VM_BUILT=1
    _r vagrant halt yaesm-pytest
     VM_STATE=poweroff
    _log 'saving postbuild snapshot of yaesm-pytest VM'
    _r vagrant snapshot save yaesm-pytest yaesm-pytest-postbuild-snapshot
    VM_SNAPSHOT_EXISTS=0
fi

if [ 0 -eq $OPT_UPDATE_PYTHON_DEPS ]; then
    _log 'updating yaesm python dependencies in the VM'
    _r vagrant snapshot restore yaesm-pytest yaesm-pytest-postbuild-snapshot 
    _r vagrant ssh -c '. /home/vagrant/yaesm-venv/bin/activate && pip3 install -r /home/vagrant/yaesm/requirements.txt -r /home/vagrant/yaesm/requirements_tests.txt'
    _r vagrant halt yaesm-pytest
    VM_STATE=poweroff
    _log 'updating postbuild snapshot to reflect python dependency updates'
    _r vagrant snapshot save -f yaesm-pytest yaesm-pytest-postbuild-snapshot
fi

# vagrant snapshot restore starts the VM
_r vagrant snapshot restore yaesm-pytest yaesm-pytest-postbuild-snapshot
VM_STATE=running
vagrant ssh -c "sudo bash -c 'cd /home/vagrant/yaesm && . /home/vagrant/yaesm-venv/bin/activate && pytest $OPTS_PYTEST'"
PYTEST_STATUS=$?

if [ 0 -ne $OPT_VM_KEEP_RUNNING ]; then
    _r vagrant halt yaesm-pytest
    VM_STATE=poweroff
fi

if [ 0 -eq $OPT_VM_SAVE_SNAPSHOT ]; then
    local snapshot_name="yaesm-pytest-$(date +%Y_%m_%d_%H:%M)"
    _r vagrant snapshot save yaesm-pytest "$snapshot_name"
    _log "created snapshot of yaesm-pytest VM named $snapshot-name"
fi

exit $PYTEST_STATUS
