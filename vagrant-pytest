#!/bin/bash

_print_help_msg() {
    cat <<'END_HELP_MSG'
Usage: vagrant-pytest [-B] [-D] [-H] [-K] [-S] <pytest_args..>

vagrant-pytest is a wrapper around pytest, running it inside a Ubuntu Linux
libvirt virtual machine that is created and managed using Vagrant. By using
Vagrant, the virtual machine is reproducible, can be snapshotted, and allows
all pytest runs to start in a clean environment regardless of previous runs.

For more information about the virtual machine environment see the file
Vagrantfile_pytest. For more information about Vagrant, libvirt, and pytest,
refer to their respective documentation.

Note that because the Vagrantfile uses a non-standard name, Vagrantfile_pytest,
if you wish to perform vagrant operations on the virtual machine outside of this
program you will need to set the environment variable
VAGRANT_VAGRANTFILE=Vagrantfile_pytest.

This program should exit with the same status as the pytest run, however, in the
case of an unexpected failure or misconfigured environment it exits with status
99. If things are unexpectedly going wrong try running this program with the -D
and -V options.

Options:
  -D            Run this program in debug mode (set -x)
  -V            Run this program in verbose mode
  -B            Force rebuild of the virtual machine (snapshots will be lost)
  -H            Print this help message and exit 0
  -R            Keep the virtual machine running after this program exits
  -S            Create a snapshot of the virtual machine after executing pytest

Examples:
  ./vagrant-pytest tests
  ./vagrant-pytest -H
  ./vagrant-pytest -B -V -S --show-capture=stdout --fixtures-per-test tests
END_HELP_MSG
}

set -E

_r() { # runs command but bails out if the command exits non-zero 
    set -e
    if [ 0 -eq $OPT_VERBOSE ]; then
        eval "$@"
    else
        eval "$@" &>/dev/null
    fi
    set +e
    return 0
}

_log() {
    local msg=$1
    1>&2 printf 'vagrant-pytest: log: %s\n' "$msg"
}

_die() {
    local msg=$1
    1>&2 printf 'vagrant-pytest: fatal error: %s\n' "$msg"
    exit 99
}

trap 'if [[ $- == *e* ]]; then 1>&2 printf "vagrant-pytest: fatal command failure: %s\n" "$BASH_COMMAND"; exit 99; fi' ERR

OPTS_PYTEST=''
OPT_DEBUG=1
OPT_VERBOSE=1
OPT_VM_FORCE_BUILD=1
OPT_VM_KEEP_RUNNING=1
OPT_VM_SAVE_SNAPSHOT=1
while [ -n "$1" ]; do # This script uses single capital letter opts to not clash with pytest opts.
    case "$1" in
        -B)
          OPT_VM_FORCE_BUILD=0
          shift
          ;;
        -D)
          set -x
          PS4='vagrant-pytest: DEBUG: line $LINENO: '
          shift
          ;;
        -H)
          _print_help_msg
          exit 0
          ;;
        -R)
          OPT_VM_KEEP_RUNNING=0
          shift
          ;;
        -S)
          OPT_VM_SAVE_SNAPSHOT=0
          shift
          ;;
        -V)
          OPT_VERBOSE=0
          shift
          ;;
        *)
          OPTS_PYTEST="$OPTS_PYTEST $1"
          shift
          ;;
    esac
done

command -v vagrant    &>/dev/null || _die 'vagrant not in $PATH'
command -v virsh      &>/dev/null || _die 'virsh not in $PATH (libvirt not installed?)'
command -v rsync      &>/dev/null || _die 'rsync not in $PATH'
if [[ $(basename $(pwd)) != yaesm || ! -f Vagrantfile_pytest || ! -d src || ! -d tests ]]; then
    _die 'not in yaesm root directory'
fi

export VAGRANT_VAGRANTFILE=Vagrantfile_pytest
export FOG_LOG_LEVEL=ERROR

VM_STATE=$(vagrant status --machine-readable yaesm-pytest 2>/dev/null | grep ',yaesm-pytest,state,' | awk -F',' '{ORS=""; print $NF}')
[[ -n $VM_STATE && $VM_STATE != not_created ]]
VM_BUILT=$?
vagrant snapshot list --machine-readable yaesm-pytest 2>/dev/null | grep -q ',yaesm-pytest-postbuild-snapshot'
VM_SNAPSHOT_EXISTS=$?

if [[ 0 -eq $VM_BUILT ]] && [[ 0 -ne $VM_SNAPSHOT_EXISTS ]]; then
    _die 'yaesm-pytest VM exists but its post-build snapshot does not exist'
fi

if [[ running == $VM_STATE ]]; then
    _r vagrant halt -f yaesm-pytest
     VM_STATE=poweroff
fi

if [[ 0 -eq $OPT_VM_FORCE_BUILD ]] && [[ 0 -eq $VM_BUILT ]]; then
    _log 'destroying yaesm-pytest VM'
    _r vagrant destroy -f yaesm-pytest
    VM_STATE=not_created
    VM_BUILT=1
    VM_SNAPSHOT_EXISTS=1 # snapshots are destroyed along with the VM
    _r vagrant global-status --prune
fi

if [[ 0 -ne $VM_BUILT ]]; then
    _log 'building yaesm-pytest VM'
    if ! grep -q '^vagrant-libvirt' <(vagrant plugin list); then
        _r vagrant plugin install vagrant-libvirt
    fi
    _r vagrant up --provider libvirt --no-install-provider yaesm-pytest
    VM_BUILT=1
    _r vagrant halt yaesm-pytest
     VM_STATE=poweroff
    _log 'saving postbuild snapshot of yaesm-pytest VM'
    _r vagrant snapshot save yaesm-pytest yaesm-pytest-postbuild-snapshot
    VM_SNAPSHOT_EXISTS=0
fi

_r vagrant snapshot restore --no-start yaesm-pytest yaesm-pytest-postbuild-snapshot
_r vagrant up yaesm-pytest --provider libvirt
VM_STATE=running
vagrant ssh yaesm-pytest -c "sudo bash -c 'cd /home/vagrant/yaesm && . /home/vagrant/yaesm-venv/bin/activate && pytest $OPTS_PYTEST'" 2> >(grep -v '^\[fog\]\[WARNING\]' 1>&2) # for information on [fog][WARNING] see https://github.com/vagrant-libvirt/vagrant-libvirt/issues/1831#issuecomment-2471728475
PYTEST_STATUS=$?

if [[ 0 -ne $OPT_VM_KEEP_RUNNING ]]; then
    _r vagrant halt -f yaesm-pytest
    VM_STATE=poweroff
fi

if [[ 0 -eq $OPT_VM_SAVE_SNAPSHOT ]]; then
    local snapshot_name="yaesm-pytest-$(date +%Y_%m_%d_%H:%M)"
    _r vagrant snapshot save yaesm-pytest "$snapshot_name"
    _log "created snapshot of yaesm-pytest VM named $snapshot-name"
fi

exit $PYTEST_STATUS
